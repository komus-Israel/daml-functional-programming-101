module Looping.Foldl where

import Daml.Script

-- | Folds correspond to looping with an explicit iterator: `for` and `forEach` loops
-- | in procedural languages.
-- | Daml has `foldl`. The `l` stands for left, which means it processes the list from the left
-- | There is a corresponding `foldr` which processes from the right

-- foldL : (b -> a -> b) -> b -> [a] -> b
-- ^  FoldL definition
-- ^ `b` is the state
-- ^ `a` is an item
-- ^ First argument is a function that takes a state and an item and returns a new state
-- ^ It then takes a state, which is the initial state, and a list of items, which is the iterator
-- ^ The result is a state again

-- | Example: summing arrays
sumArrays : [Int] -> [Int] -> [Int]
sumArrays array_1 array_2 =
    foldl(\state (x,y) -> (x + y) :: state) [] (zip array_1 array_2)

-- | Example: multiplying each element of an array by a factor
multiplyElements : [Int] -> Int -> [Int]
multiplyElements array factor =
    foldl(\_array _item -> (_item * factor) :: _array) [] array
   


test_foldl : Script ([Int], [Int])
test_foldl = do

    let array_1 = [2, 4, 5, 6]
    let array_2 = [19, 7, 8, 9, 8]

    let sum_arrays = sumArrays array_1 array_2
    let multiply_elements = multiplyElements array_1 3
    
    return (sum_arrays, multiply_elements)